import { Groth16Proof, CircomProof, ProofInputs } from '../../../src/sequencer';

const finalInputs: ProofInputs = {
    fields: [
        '1', '0', '0',
        '0', '0', '0',
        '0', '0'
    ],
    max_count: '1',
    force_uniqueness: '0',
    max_value: '10',
    min_value: '0',
    max_total_cost: '10',
    min_total_cost: '0',
    cost_exp: '0',
    cost_from_weight: '0',
    address: '369176254774921173503540987147142181323783030377',
    weight: '60',
    process_id: '300741215126989635568926590859335070652054100335451369368362515401443115123',
    pk: [
        '21042421135148078925776845390090490704968728286046423202096772642716600155536',
        '9426525542650791158046003409934506209718927941267507663165051158916505773203'
    ],
    k: '964256131946492867709099996647243890828558919187',
    cipherfields: [
        '625333272902757842837617467421028371920709164348564605234349966565262381045',
        '576180601180407879660238880921908594720814819051718390862497634406392187453',
        '36787294218100892099100429617743228935574841676663520249358460923968029098',
        '8522179934702422125404807530212873552776211014830434614912615204736710290254',
        '8048294641789133417140942244699049812825872899731369353513220716279181667197',
        '12322876234263783949483811900557572974777432308554495600365327018691534545423',
        '16318166198591189047656165704242384630134438309367229925753002949872594808278',
        '11386343996851035618325103636910067614105640141721359079001456959431034165746',
        '10664999651055619885911247381412181418945272313534805541037812248048101966446',
        '17888049322522845368400581047931350499204325393251043913139408632831871487595',
        '2235514898091145126448378216429781405369016793680042169245136192042601461632',
        '7270501235669828369295052774572238272049212493393721471041310568005142158540',
        '17664367888698263286273333303891194216250542287679297761372087038602947221473',
        '12554822185530836280814930503835979803268624469934534487791400733737491592446',
        '16377466668487409187688122389034076206962656898692530577668753712433619780527',
        '18648574964328637742081906789928425840055788485813598645577109176722623942223',
        '5610830228525170938298074137792250239266761590704056337872892209137424663630',
        '18791607216323255385013938871003107469247534070009981654620282512700448328830',
        '15111836028408350241632046206346226355646591066880277941362691498804179694988',
        '7282794557479814042221425015418742785541255344979385103821846393524258363220',
        '15101165957450720139094124633615707723777727842100812102042953348439339942633',
        '18544632384914719791309187435747385733388748514646877831535507287605358054613',
        '18745286067584612255863662816276236905047508495507380053752283739834314624051',
        '13663983749205610206638337303717062550288146177962101282833885169825235928710',
        '20127706403376385247116932572547033491997964218509726713156858911206182477984',
        '9404111518440806046144850205449621831590726627907366347545855465772287446718',
        '2231881076896616629169736969126654998961558039957032236808846328563969097508',
        '21199397145173069679945402009844133776666254843499831318023375592088383387160',
        '2752826271069069720840475425438170143616917647095772730986821215894724918462',
        '21188920668179659941178036927489339784430469281325223192235672930408172146750',
        '9201433091390537763134298372658885686129964623850637155390218316736668912285',
        '2931066132411712687254516624687560907293468814208718848479905821990614582981'
    ],
    nullifier: '11943865208364263247237142318913744034380280700777153545890016131872860770521',
    commitment: '20370902983263033734291087485970177565626083202916094307773283806769593218278',
    secret: '180938008061752692438535425262477716790',
    inputs_hash: '17474525098493802912413725927461095801208025391709024770963396289290976953445'
}

describe("CircomProofService Integration", () => {
    let service: CircomProof;
    let proof: Groth16Proof;
    let publicSignals: string[];

    beforeAll(() => {
        service = new CircomProof({
            wasmUrl: 'https://circuits.ams3.cdn.digitaloceanspaces.com/dev/ballot_proof.wasm',
            zkeyUrl: 'https://circuits.ams3.cdn.digitaloceanspaces.com/dev/ballot_proof_pkey.zkey',
            vkeyUrl: 'https://circuits.ams3.cdn.digitaloceanspaces.com/dev/ballot_proof_vkey.json'
        });
    });

    it("builds the ProofInputs and runs fullProve()", async () => {
        ({ proof, publicSignals } = await service.generate(finalInputs));

        // pi_a
        expect(Array.isArray(proof.pi_a)).toBe(true);
        expect(proof.pi_a).toHaveLength(3);
        proof.pi_a.forEach((x) => expect(typeof x).toBe("string"));
        // pi_b
        expect(Array.isArray(proof.pi_b)).toBe(true);
        expect(proof.pi_b).toHaveLength(3);
        proof.pi_b.forEach((pair) => {
            expect(Array.isArray(pair)).toBe(true);
            expect(pair).toHaveLength(2);
            pair.forEach((x) => expect(typeof x).toBe("string"));
        });
        // pi_c
        expect(Array.isArray(proof.pi_c)).toBe(true);
        expect(proof.pi_c).toHaveLength(3);
        proof.pi_c.forEach((x) => expect(typeof x).toBe("string"));

        // protocol & curve
        expect(typeof proof.protocol).toBe("string");
        expect(proof.protocol).toBe("groth16");
        expect(typeof proof.curve).toBe("string");
        expect(proof.curve).toBe("bn128");

        // publicSignals
        expect(Array.isArray(publicSignals)).toBe(true);
        expect(publicSignals).toHaveLength(1);
        publicSignals.forEach((sig) => {
            expect(typeof sig).toBe("string");
            expect(() => BigInt(sig)).not.toThrow();
        });
        // must equal the inputs_hash we built
        expect(publicSignals[0]).toBe(finalInputs.inputs_hash);
    }, 60_000);

    it("pulls down the vkey and verifies()", async () => {
        const ok = await service.verify(proof, publicSignals);
        expect(ok).toBe(true);
    }, 30_000);
});
